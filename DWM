import time
import numpy as np

# === Kalmanfilter-konfiguration ===
kalman_x = {
    'x': 0.0,
    'v': 0.0,
    'P': np.array([[1, 0], [0, 1]], dtype=np.float32)
}
kalman_y = {
    'x': 0.0,
    'v': 0.0,
    'P': np.array([[1, 0], [0, 1]], dtype=np.float32)
}

def kalman_update(kalman_state, acc, measurement=None, dt=0.1):
    A = np.array([[1, dt], [0, 1]])
    B = np.array([[0.5 * dt**2], [dt]])
    x = np.array([[kalman_state['x']], [kalman_state['v']]])
    u = np.array([[acc]])

    Q = np.array([[0.01, 0], [0, 0.01]])

    acc_magnitude = abs(acc)
    if acc_magnitude < 0.1:
        R = 5.0    # Lita på DWM
    elif acc_magnitude < 1.0:
        R = 25.0   # Lita delvis på båda
    else:
        R = 100.0  # Lita mer på acc

    x_pred = A @ x + B @ u
    P_pred = A @ kalman_state['P'] @ A.T + Q

    if measurement is not None:
        H = np.array([[1, 0]])
        z = np.array([[measurement]])
        y = z - H @ x_pred
        S = H @ P_pred @ H.T + R
        K = P_pred @ H.T @ np.linalg.inv(S)
        x_new = x_pred + K @ y
        P_new = (np.eye(2) - K @ H) @ P_pred
    else:
        x_new = x_pred
        P_new = P_pred

    kalman_state['x'] = x_new[0, 0]
    kalman_state['v'] = x_new[1, 0]
    kalman_state['P'] = P_new
    return kalman_state['x']

# === Uppdaterad DWM-tråd ===
def dwm_position_task(client_sock):
    global x, y
    try:
        with serial.Serial("/dev/ttyACM0", 115200, timeout=1) as ser:
            ser.write(b"\r")
            time.sleep(0.1)
            ser.write(b"\r")
            time.sleep(0.1)

            # Vänta på DWM-prompt
            start = time.time()
            while time.time() - start < 2:
                if ser.in_waiting:
                    line = ser.readline().decode("utf-8").strip()
                    if "dwm>" in line:
                        break

            ser.write(b"lep\r")
            time.sleep(0.2)
            print("[AGV] DWM-positionering startad.")

            last_time = time.time()

            while True:
                now = time.time()
                dt = now - last_time
                last_time = now

                ax, ay = 0.0, 0.0
                if esp_serial.in_waiting:
                    esp_line = esp_serial.readline().decode().strip()
                    if esp_line.startswith("mpu:"):
                        try:
                            parts = esp_line.replace("mpu:", "").split(",")
                            ax = float(parts[0].split(":")[1])
                            ay = float(parts[1].split(":")[1])
                        except Exception as e:
                            print("[Kalman] Fel vid parsing av MPU:", e)
                            continue

                line = ser.readline().decode("utf-8").strip()
                if line.startswith("POS,"):
                    parts = line.split(",")
                    if len(parts) >= 3:
                        raw_x = float(parts[1]) * 100.0
                        raw_y = float(parts[2]) * 100.0

                        x_filtered = kalman_update(kalman_x, ax, raw_x, dt)
                        y_filtered = kalman_update(kalman_y, ay, raw_y, dt)

                        x, y = round(x_filtered), round(y_filtered)

                        client_sock.send(f"POS:{x},{y}\r\n".encode("utf-8"))
                        print(f"[AGV] Kalman POS: {x},{y}")
    except Exception as e:
        print("[AGV] DWM-fel:", e)
