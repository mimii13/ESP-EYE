/*
 * AGV ESP32-huvudkod:
 * - Läser UWB (DWM1001) för absolut position via UART
 * - Läser IMU (MPU-9150) via I2C, automatisk kalibrering med NVS-lagring för magnetometer
 * - Använder IMU för Yaw, Pitch, Roll-orientering
 * - Gör sensorfusion (Kalman X/Y) för UWB-position
 * - Tar emot målkoordinat från Raspberry Pi via UART
 * - Styr motorer via PWM, anpassar kraft efter batterispänning (ADC)
 * - Använder Yaw för att orientera sig mot mål innan rörelse
 * - Skickar tillbaka aktuella positioner till Raspberry Pi
 * - Väntar på "GO,x,y" eller "STOP" från Pi
 */

#include <Wire.h>
#include <MPU9250_asukiaaa.h> // For MPU9150 (MPU9250 library is generally compatible)
#include <HardwareSerial.h>
#include <SimpleKalmanFilter.h>
#include <Preferences.h>      // For Non-Volatile Storage (NVS)

// --- PIN- och PWM-inställningar ---
#define DWM_RX 16     // UART RX för DWM1001 (UWB)
#define DWM_TX 17     // UART TX för DWM1001 (UWB)
#define DWM_BAUD 115200

#define RXD2 16       // UART RX från Pi (Note: Same as DWM_RX, check if this is intended or if DWM uses UART1/2)
                      // If DWMSerial is on UART2 (pins 16,17), then Serial2 for Pi cannot use same pins.
                      // Assuming DWMSerial is on UART2, and Pi (Serial2) is on different pins if hardware allows,
                      // or this was a copy-paste and DWM_RX/TX are for a different HardwareSerial instance.
                      // For this code, I will assume DWMSerial(2) uses GPIO 16, 17 as specified.
                      // And Serial2 (for Pi) uses its default pins if not specified, or RXD2/TXD2 if they are different.
                      // The original code had RXD2 16, TXD2 17 which are the same as DWM_RX/TX for DWMSerial(2).
                      // This means DWM1001 and Pi communication cannot happen simultaneously on these exact pins if both use UART2.
                      // Let's assume the user has a setup where this works or will adjust pins.
                      // For now, I'll keep the pin definitions as in the original code.

// Motorpinnar
const int pwmPinRF = 18, pwmPinRB = 19, pwmPinLF = 32, pwmPinLB = 33;
const int pwmChannelA = 0, pwmChannelB = 1, pwmChannelC = 2, pwmChannelD = 3;
const int pwmFreq = 5000, pwmResolution = 8;

// --- Batterimätning (ADC) ---
const int analogBatteryPin = 39;
const float R1 = 18000.0;
const float R2 = 6700.0;

// --- Objekt/bibliotek ---
HardwareSerial DWMSerial(2); // UART2 för UWB (typically uses GPIO16 for RX, GPIO17 for TX)
MPU9250_asukiaaa mySensor;
Preferences preferences;     // For NVS

// --- Kalmanfilter för X/Y (sensorfusion för UWB-position) ---
SimpleKalmanFilter kfX(1, 1, 0.01);
SimpleKalmanFilter kfY(1, 1, 0.01);

// --- Tillståndsvariabler ---
float posX=0, posY=0, posZ=0; // UWB-position
float fusedX=0, fusedY=0, fusedZ=0; // Fuserad (Kalman) UWB position
float vx=0, vy=0, vz=0; // Ej fullt implementerat
float yaw=0, pitch=0, roll=0; // Orientering från IMU
bool targetActive = false;
float targetX=0, targetY=0;
// float targetYaw=0; // Not used from Pi, ESP32 calculates desired yaw
float posTolerance = 0.10; // Meter, närmålsstopp för position
float angleTolerance = 5.0; // Degrees, tolerans för yaw-orientering

unsigned long lastUWB=0;

// --- Motor-DutyCycle (anpassas dynamiskt efter batterispänning) ---
int dutyF = 75;
int dutyB = 146;
const int baseDutyF = 75;
const int baseDutyB = 146;
const float nominalVoltage = 7.2f;

// --- DWM1001 TLV state machine ---
enum { WAIT_HEADER, READ_TYPE, READ_LEN, READ_VALUE, READ_CSUM } tlv_state = WAIT_HEADER;
uint8_t tlv_type, tlv_len, tlv_value[32], tlv_valueIdx, tlv_cs;

// --- Funktion för att mäta och returnera aktuell batterispänning ---
float measureBatteryVoltage() {
  int rawADC = analogRead(analogBatteryPin);
  float voltageAtPin = (rawADC / 4095.0) * 3.575; // ESP32 ADC reference can vary, calibrate if needed
  float batteryVoltage = voltageAtPin * (R1 + R2) / R2;
  return batteryVoltage;
}

// --- Dynamisk PWM-anpassning beroende på batterispänning ---
void updateDutyCycles() {
  float batteryVoltage = measureBatteryVoltage();
  float voltageRatio = nominalVoltage / batteryVoltage;
  dutyF = int(baseDutyF * voltageRatio);
  dutyB = int(baseDutyB * voltageRatio);

  dutyF = constrain(dutyF, 0, 255);
  dutyB = constrain(dutyB, 0, 255);
}

// --- Motorstyrningsfunktioner ---
void stop() {
  ledcWrite(pwmChannelA, 0); ledcWrite(pwmChannelB, 0);
  ledcWrite(pwmChannelC, 0); ledcWrite(pwmChannelD, 0);
}
void forward() {
  ledcWrite(pwmChannelA, dutyF); ledcWrite(pwmChannelB, 0);
  ledcWrite(pwmChannelC, dutyF); ledcWrite(pwmChannelD, 0);
}
void backward() { // Note: backward might not be needed if always orienting first
  ledcWrite(pwmChannelA, 0); ledcWrite(pwmChannelB, dutyB);
  ledcWrite(pwmChannelC, 0); ledcWrite(pwmChannelD, dutyB);
}
void rotateLeft() {
  ledcWrite(pwmChannelA, 0); ledcWrite(pwmChannelB, dutyB); // RF backward
  ledcWrite(pwmChannelC, dutyF); ledcWrite(pwmChannelD, 0); // LF forward
}
void rotateRight() {
  ledcWrite(pwmChannelA, dutyF); ledcWrite(pwmChannelB, 0); // RF forward
  ledcWrite(pwmChannelC, 0); ledcWrite(pwmChannelD, dutyB); // LF backward
}


// --- Gyro-kalibrering ---
void calibrateGyro() {
  Serial.println("Starting Gyro calibration...");
  float gx_sum = 0.0, gy_sum = 0.0, gz_sum = 0.0;
  const int samples = 200;
  for (int i = 0; i < samples; i++) {
    mySensor.gyroUpdate();
    gx_sum += mySensor.gyroX(); // Degrees per second
    gy_sum += mySensor.gyroY();
    gz_sum += mySensor.gyroZ();
    delay(5);
  }
  mySensor.setGyroBias(gx_sum / samples, gy_sum / samples, gz_sum / samples);
  Serial.println("Gyro calibration complete.");
  Serial.print("Set Gyro Biases: X="); Serial.print(gx_sum / samples);
  Serial.print(" Y="); Serial.print(gy_sum / samples);
  Serial.print(" Z="); Serial.println(gz_sum / samples);
}

// --- Accelerometer-kalibrering ---
void calibrateAccel() {
  Serial.println("Starting Accelerometer calibration. Keep the robot flat and still.");
  float ax_sum = 0, ay_sum = 0, az_sum = 0;
  const int samples = 200;
  for (int i = 0; i < samples; i++) {
    mySensor.accelUpdate();
    ax_sum += mySensor.accelX(); // Gs
    ay_sum += mySensor.accelY();
    az_sum += mySensor.accelZ();
    delay(5);
  }
  // IMPORTANT: Verify your MPU's Z-axis orientation.
  // If Z points UP (away from Earth), target_gz is +1.0.
  // If Z points DOWN (towards Earth), target_gz is -1.0.
  // Assuming Z points UP for this code:
  float target_gz = 1.0f;
  mySensor.setAccelBias(ax_sum / samples, ay_sum / samples, (az_sum / samples) - target_gz);
  Serial.println("Accelerometer calibration complete.");
  Serial.print("Set Accel Biases (raw_avg - target): X="); Serial.print(ax_sum / samples);
  Serial.print(" Y="); Serial.print(ay_sum / samples);
  Serial.print(" Z_bias="); Serial.println((az_sum / samples) - target_gz);
}

// --- Magnetometer NVS funktioner ---
void saveMagCalibration() {
  preferences.begin("magCal", false); // Open NVS in R/W mode
  preferences.putFloat("magOffX", mySensor.magXOffset);
  preferences.putFloat("magOffY", mySensor.magYOffset);
  preferences.putFloat("magOffZ", mySensor.magZOffset);
  preferences.putFloat("magScaX", mySensor.magXScale);
  preferences.putFloat("magScaY", mySensor.magYScale);
  preferences.putFloat("magScaZ", mySensor.magZScale);
  preferences.putBool("calDone", true);
  preferences.end();
  Serial.println("Magnetometer calibration data saved to NVS.");
}

bool loadMagCalibration() {
  preferences.begin("magCal", true); // Open NVS in Read-only mode
  bool success = preferences.getBool("calDone", false);
  if (success) {
    float oX = preferences.getFloat("magOffX", 0);
    float oY = preferences.getFloat("magOffY", 0);
    float oZ = preferences.getFloat("magOffZ", 0);
    float sX = preferences.getFloat("magScaX", 1);
    float sY = preferences.getFloat("magScaY", 1);
    float sZ = preferences.getFloat("magScaZ", 1);
    mySensor.setMagCalibration(oX, oY, oZ, sX, sY, sZ);
    Serial.println("Magnetometer calibration data loaded from NVS.");
    Serial.print("Mag Offsets: X="); Serial.print(oX); Serial.print(" Y="); Serial.print(oY); Serial.print(" Z="); Serial.println(oZ);
    Serial.print("Mag Scales: X="); Serial.print(sX); Serial.print(" Y="); Serial.print(sY); Serial.print(" Z="); Serial.println(sZ);
  } else {
    Serial.println("No magnetometer calibration data found in NVS.");
  }
  preferences.end();
  return success;
}

// --- DWM1001 TLV parsing ---
void readDWM1001() {
  while (DWMSerial.available()) {
    uint8_t b = DWMSerial.read();
    switch (tlv_state) {
      case WAIT_HEADER: if (b==0x0D) tlv_state=READ_TYPE; break;
      case READ_TYPE: tlv_type=b; tlv_state=READ_LEN; break;
      case READ_LEN: tlv_len=b; tlv_valueIdx=0; tlv_state=(tlv_len>0)?READ_VALUE:READ_CSUM; break;
      case READ_VALUE: tlv_value[tlv_valueIdx++]=b; if (tlv_valueIdx==tlv_len) tlv_state=READ_CSUM; break;
      case READ_CSUM:
        tlv_cs=b; uint8_t cs=tlv_type^tlv_len; for(int i=0;i<tlv_len;++i) cs^=tlv_value[i];
        if(tlv_cs==cs && tlv_type==0x41 && tlv_len>=13) {
          int32_t x_mm = tlv_value[0] | (tlv_value[1]<<8) | (tlv_value[2]<<16) | (tlv_value[3]<<24);
          int32_t y_mm = tlv_value[4] | (tlv_value[5]<<8) | (tlv_value[6]<<16) | (tlv_value[7]<<24);
          int32_t z_mm = tlv_value[8] | (tlv_value[9]<<8) | (tlv_value[10]<<16) | (tlv_value[11]<<24);
          posX = x_mm / 1000.0; posY = y_mm / 1000.0; posZ = z_mm / 1000.0; // Meter
          lastUWB = millis();
        }
        tlv_state=WAIT_HEADER; break;
    }
  }
}

// --- IMU-läsning och orientering (pitch/yaw/roll) ---
void readIMU() {
  uint8_t accelStatus = mySensor.accelUpdate();
  uint8_t gyroStatus = mySensor.gyroUpdate();
  uint8_t magStatus = mySensor.magUpdate();

  if (accelStatus == 0 && gyroStatus == 0 && magStatus == 0) { // 0 means success
    mySensor.computeEulerAngles(true); // true to use magnetometer for yaw
    yaw = mySensor.yaw;     // Yaw in degrees (-180 to +180)
    pitch = mySensor.pitch; // Pitch in degrees
    roll = mySensor.roll;   // Roll in degrees
  } else {
    Serial.print("IMU Update Error: Accel="); Serial.print(accelStatus);
    Serial.print(" Gyro="); Serial.print(gyroStatus);
    Serial.print(" Mag="); Serial.println(magStatus);
  }
}

// --- Rörelselogik: orientera och kör mot mål ---
void handleMotion() {
  if (!targetActive) {
    stop();
    return;
  }

  float dx = targetX - fusedX;
  float dy = targetY - fusedY;
  float distToTarget = sqrt(dx * dx + dy * dy);

  if (distToTarget < posTolerance) {
    stop();
    targetActive = false;
    Serial2.println("REACHED");
    Serial.println("Target reached!");
    return;
  }

  // Calculate desired heading angle to target (in degrees, -180 to +180)
  float targetAngleDegrees = atan2(dy, dx) * 180.0 / M_PI;

  // Calculate angle error (shortest angle from current yaw to targetAngleDegrees)
  float angleError = targetAngleDegrees - yaw;
  while (angleError > 180.0f) angleError -= 360.0f;
  while (angleError < -180.0f) angleError += 360.0f;

  if (abs(angleError) > angleTolerance) {
    // Need to rotate
    if (angleError > 0) { // Positive error means target is to the "left" if yaw increases counter-clockwise
                          // or "right" if yaw increases clockwise.
                          // Assuming MPU9250_asukiaaa yaw increases counter-clockwise (standard).
                          // If error is positive (e.g. target 90, current 0), need to rotate left (CCW).
                          // If error is negative (e.g. target -90, current 0), need to rotate right (CW).
      // This depends on your rotateLeft/rotateRight implementation.
      // rotateLeft() should make yaw increase (turn counter-clockwise).
      // rotateRight() should make yaw decrease (turn clockwise).
      // Let's assume rotateLeft increases yaw and rotateRight decreases yaw.
      Serial.print("Angle Error: "); Serial.print(angleError); Serial.println(" -> Rotating...");
      if (angleError > 0) rotateLeft(); else rotateRight();

    } else { // Angle is acceptable, move forward
      Serial.print("Angle OK. Error: "); Serial.print(angleError); Serial.println(" -> Moving Forward");
      forward();
    }
  } else { // Angle is acceptable, move forward
      Serial.print("Angle OK. Error: "); Serial.print(angleError); Serial.println(" -> Moving Forward");
      forward();
  }
}


void setup() {
  Serial.begin(115200); // USB debug
  Serial.println("ESP32 AGV Starting...");

  // UART till/från Pi
  // Note: Original code uses RXD2 (16), TXD2 (17) for Serial2.
  // These are default for UART2. If DWMSerial also uses UART2, there's a conflict.
  // Assuming user manages this (e.g., DWM on UART1, Pi on UART2, or vice-versa with correct pins).
  // Or, if they are indeed shared, that communication is interleaved and managed.
  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2);

  analogReadResolution(12);

  ledcAttachPin(pwmPinRF, pwmChannelA); ledcSetup(pwmChannelA, pwmFreq, pwmResolution);
  ledcAttachPin(pwmPinRB, pwmChannelB); ledcSetup(pwmChannelB, pwmFreq, pwmResolution);
  ledcAttachPin(pwmPinLF, pwmChannelC); ledcSetup(pwmChannelC, pwmFreq, pwmResolution);
  ledcAttachPin(pwmPinLB, pwmChannelD); ledcSetup(pwmChannelD, pwmFreq, pwmResolution);
  stop();
  delay(500);

  Wire.begin(21, 22); // Standard ESP32 I2C pins: GPIO21 (SDA), GPIO22 (SCL)
  mySensor.setWire(&Wire);

  Serial.println("Initializing Accel/Gyro...");
  mySensor.beginAccel();
  mySensor.beginGyro();
  calibrateGyro();
  calibrateAccel();

  Serial.println("Initializing Magnetometer...");
  mySensor.beginMag();
  if (!loadMagCalibration()) {
    Serial.println("\nStarting NEW Magnetometer Calibration in 5 seconds...");
    Serial.println("Ensure motors and other electronics (RPi) are POWERED ON.");
    Serial.println("Rotate the robot slowly and thoroughly through all orientations (pitch, roll, yaw).");
    Serial.println("Make figure-eight motions in the air. This will take 30-60 seconds.");
    delay(5000);
    mySensor.magCalibration(); // Interactive calibration
    saveMagCalibration();      // Save results to NVS
  }
  Serial.print("Current Mag Offsets: X="); Serial.print(mySensor.magXOffset);
  Serial.print(" Y="); Serial.print(mySensor.magYOffset);
  Serial.print(" Z="); Serial.println(mySensor.magZOffset);
  Serial.print("Current Mag Scales: X="); Serial.print(mySensor.magXScale);
  Serial.print(" Y="); Serial.print(mySensor.magYScale);
  Serial.print(" Z="); Serial.println(mySensor.magZScale);


  DWMSerial.begin(DWM_BAUD, SERIAL_8N1, DWM_RX, DWM_TX);
  delay(500);
  // DWM1001 init commands (unchanged from original)
  uint8_t setRate[] = {0x00, 0x64, 0x00, 0x64};
  DWMSerial.write(0x0D); DWMSerial.write(0x0A); DWMSerial.write(4);
  for (int i=0;i<4;++i) DWMSerial.write(setRate[i]);
  DWMSerial.write(0x0A^4^setRate[0]^setRate[1]^setRate[2]^setRate[3]);
  delay(100);
  uint8_t subscribe[] = {0x02, 0x00, 0x64};
  DWMSerial.write(0x0D); DWMSerial.write(0x14); DWMSerial.write(3);
  for (int i=0;i<3;++i) DWMSerial.write(subscribe[i]);
  DWMSerial.write(0x14^3^subscribe[0]^subscribe[1]^subscribe[2]);
  delay(100);
  uint8_t filterOff[] = {0x00};
  DWMSerial.write(0x0D); DWMSerial.write(0x43); DWMSerial.write(1); DWMSerial.write(0x00); DWMSerial.write(0x43^1^0x00);

  Serial.println("ESP32 READY");
}

void loop() {
  updateDutyCycles();
  readDWM1001();

  static unsigned long lastImuUpdateTime = 0;
  unsigned long currentTime = millis();
  if (currentTime - lastImuUpdateTime >= 20) { // Update IMU at approx 50Hz
    lastImuUpdateTime = currentTime;
    readIMU();
  }

  static unsigned long lastKalmanTime = 0;
  if (lastUWB > lastKalmanTime) { // New UWB data received
    lastKalmanTime = lastUWB;
    fusedX = kfX.updateEstimate(posX);
    fusedY = kfY.updateEstimate(posY);
    // Skicka aktuell position tillbaka till Pi
    Serial2.print("POS,"); Serial2.print(fusedX,2); Serial2.print(","); Serial2.println(fusedY,2);
  }

  if (Serial2.available()) {
    String cmd = Serial2.readStringUntil('\n');
    cmd.trim();
    if (cmd.startsWith("GO,")) {
      int idx1 = cmd.indexOf(',');
      int idx2 = cmd.indexOf(',', idx1 + 1);
      if (idx1 > 0 && idx2 > idx1) {
        targetX = cmd.substring(idx1 + 1, idx2).toFloat();
        targetY = cmd.substring(idx2 + 1).toFloat();
        targetActive = true;
        Serial.print("New target set: X="); Serial.print(targetX);
        Serial.print(", Y="); Serial.println(targetY);
      }
    } else if (cmd == "STOP") {
      stop();
      targetActive = false;
      Serial.println("STOP command received.");
    }
  }

  handleMotion();

  // Periodic debug print for orientation
  static unsigned long lastOrientationPrintTime = 0;
  if (currentTime - lastOrientationPrintTime >= 200) { // Print 5 times a second
    lastOrientationPrintTime = currentTime;
    Serial.print("Yaw: "); Serial.print(yaw, 1);
    Serial.print("\tPitch: "); Serial.print(pitch, 1);
    Serial.print("\tRoll: "); Serial.print(roll, 1);
    Serial.print("\tFusedPos: X="); Serial.print(fusedX, 2);
    Serial.print(" Y="); Serial.println(fusedY, 2);
  }
}
