import serial
import struct
import time

PORT = "/dev/ttyUSB0"
BAUDRATE = 460800

SYNC_BYTE = 0xA5
CMD_SCAN = 0x60
EXPECTED_DESCRIPTOR = b'\xA5\x5A\x05\x00\x00\x00\x81'

def send_command(ser, cmd_byte):
    ser.write(bytes([SYNC_BYTE, cmd_byte]))
    ser.flush()

def wait_for_descriptor(ser):
    descriptor = ser.read(7)
    if descriptor != EXPECTED_DESCRIPTOR:
        print(f"[!] Unexpected descriptor: {descriptor.hex()}")
    else:
        print("[âœ“] Descriptor matched")

def parse_scan_packet(packet):
    if len(packet) != 5:
        return None

    byte0, byte1, byte2, byte3, byte4 = packet

    # Check for start bit (bit 0 == 1) and check bit (bit 1 == 0)
    if (byte0 & 0b1) != 0b1 or (byte0 & 0b10) != 0:
        return None

    # Angle
    angle_raw = ((byte1 >> 1) | (byte2 << 7)) & 0x3FFF
    angle_deg = angle_raw / 64.0

    # Distance
    distance_raw = (byte3 | (byte4 << 8)) & 0x3FFF
    distance_mm = distance_raw / 4.0

    return angle_deg, distance_mm

def main():
    with serial.Serial(PORT, BAUDRATE, timeout=1) as ser:
        print("[*] Sending scan command...")
        send_command(ser, CMD_SCAN)

        print("[*] Waiting for scan descriptor...")
        wait_for_descriptor(ser)

        print("[*] Reading scan data (Press Ctrl+C to stop)...")

        try:
            buffer = bytearray()
            while True:
                buffer += ser.read(5 - len(buffer))  # Read until we have 5 bytes

                if len(buffer) == 5:
                    result = parse_scan_packet(buffer)
                    buffer = bytearray()  # Reset buffer for next frame

                    if result:
                        angle, distance = result
                        print(f"Angle: {angle
