def dwm_position_task(client_sock):
    global x, y
    ax, ay = 0.0, 0.0  # Initiera med defaultvärden

    try:
        with serial.Serial("/dev/ttyACM0", 115200, timeout=1) as ser:
            ser.write(b"\r")
            time.sleep(0.1)
            ser.write(b"\r")
            time.sleep(0.1)
            start = time.time()

            # Vänta på "dwm>" prompt från modulen
            while time.time() - start < 2:
                if ser.in_waiting:
                    line = ser.readline().decode("utf-8").strip()
                    print(f"[AGV][DWM] Init-linje: {line}")
                    if "dwm>" in line:
                        break

            ser.write(b"lep\r")
            time.sleep(0.2)
            print("[AGV] DWM-positionering startad.")

            while True:
                # Läs ESP MPU-data utan att blockera
                if esp_serial.in_waiting:
                    try:
                        esp_line = esp_serial.readline().decode().strip()
                        if esp_line.startswith("mpu:"):
                            parts = esp_line.replace("mpu:", "").split(",")
                            ax = float(parts[0].split(":")[1])
                            ay = float(parts[1].split(":")[1])
                    except Exception as e:
                        print("[Kalman] Fel vid parsing av MPU:", e)

                # Läs position från DWM
                if ser.in_waiting:
                    line = ser.readline().decode("utf-8").strip()
                    print(f"[AGV][DWM] Rå linje: {line}")
                    if line.startswith("POS,"):
                        parts = line.split(",")
                        if len(parts) >= 3:
                            try:
                                raw_x = float(parts[1]) * 100.0
                                raw_y = float(parts[2]) * 100.0
                                x_filtered = kalman_update(kalman_x, ax, raw_x)
                                y_filtered = kalman_update(kalman_y, ay, raw_y)
                                x, y = round(x_filtered), round(y_filtered)
                                client_sock.send(f"POS:{x},{y}\r\n".encode("utf-8"))
                                print(f"[AGV] Kalman POS: {x},{y}")
                            except Exception as e:
                                print("[Kalman] Fel vid positionsberäkning:", e)
    except Exception as e:
        print("[AGV] DWM-fel:", e)
