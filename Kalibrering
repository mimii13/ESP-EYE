// Define pin and PWM parameters
#include <driver/ledc.h> // Include the ESP32 PWM control library
#include <Wire.h>
#include <MPU9250_asukiaaa.h>

// Gyro acc
MPU9250_asukiaaa mySensor;

// Offset för gyro
float gyroX_offset = 0.0;
float gyroY_offset = 0.0;
float gyroZ_offset = 0.0;

// Motors R
const int pwmPinRF = 18;
const int pwmPinRB = 19; // GPIO pin connected to H-bridge input
const int pwmChannelA = 0;
const int pwmChannelB = 1; // PWM channel (0-15 available on ESP32)

// Motors L
const int pwmPinLF = 32;
const int pwmPinLB = 33; // GPIO pin connected to H-bridge input
const int pwmChannelC = 2;
const int pwmChannelD = 3; // PWM channel (0-15 available on ESP32)

// UART
#define RXD2 16 // ESP32 RX (connect to Pi TX)
#define TXD2 17 // ESP32 TX (connect to Pi RX)

const int pwmFreq = 5000; // Frequency in Hz
const int pwmResolution = 8; // Resolution in bits (1-16)
const int dutyCycle = 250; // For 8-bit resolution: 0-255

// Batteri
const int analogBatteryPin = 39; // GPIO39 = A3 på Huzzah32
const float R1 = 18000.0; // 18 kΩ
const float R2 = 6700.0;  // 6.8 kΩ

void setup() {
  Serial.begin(115200); // USB debug
  Serial2.begin(115200, SERIAL_8N1, RXD2, TXD2); // UART2 for Pi

  // Batteri

  analogReadResolution(12); // 12-bit upplösning

  pinMode(pwmPinRF, OUTPUT);
  pinMode(pwmPinRB, OUTPUT);
  pinMode(pwmPinLF, OUTPUT);
  pinMode(pwmPinLB, OUTPUT);

  // Configure PWM channels with `ledcSetup` first

  ledcAttachChannel(pwmPinRF, pwmFreq, pwmResolution, pwmChannelA);
  ledcAttachChannel(pwmPinRB, pwmFreq, pwmResolution, pwmChannelB);
  ledcAttachChannel(pwmPinLF, pwmFreq, pwmResolution, pwmChannelC);
  ledcAttachChannel(pwmPinLB, pwmFreq, pwmResolution, pwmChannelD);

  stop(); // Ensure stopped at startup

  delay(1000);
  Serial.println("Initierar MPU-9150...");

  Wire.begin(21, 22); // SDA, SCL för ESP32 Feather
  mySensor.setWire(&Wire);
  mySensor.beginAccel();
  mySensor.beginGyro();

  delay(500);
  calibrateGyro(); // ← Kör kalibrering när sensorn ligger stilla

  Serial.println("ESP32 ready. Waiting for commands...");
}

void loop() {
  //motorer
  if (Serial2.available()) {
  char received = Serial2.read(); // ✅ FIXED: Read from Serial2
  Serial.print("Received command: "); // Print to USB monitor
  Serial.println(received); 


  //Voltage 7.2
  const int rotRT = 2400;
  const int rotLT = 2420;

  int rawADC = analogRead(analogBatteryPin);
  float voltageAtPin = (rawADC / 4095.0) * 3.575;
  float batteryVoltage = voltageAtPin * (R1 + R2) / R2;
  float voltageRatio = 7.66 / batteryVoltage;

  int n = 0;

  if (received == '2'){ // 45 grader
    n = 1;
  }
  else if (received == '3'){ // 90 grader
    n = 2;
  }
  else if (received == '4'){ // 135 grader
    n = 3;
  }
  else if (received == '5'){ // +-180 grader
    n = 4;
  }
  else if (received == '6'){ // -45 grader
    n = 1;
  }
  else if (received == '7'){ // -90 grader
    n = 2;
  }
  else if (received == '8'){ // -135 grader
    n = 3;
  }

  switch (received) {
    case '0':
      Forward();
      Serial2.println("ACK: Forward");
      n = 0;
      break;

    case '1':
      Backward();
      Serial2.println("ACK: Backward");
      n = 0;
      break;

    case '2':
      rotR();
      delay(rotRT*voltageRatio*n/2);
      Serial2.println("ACK: Rotate Right with 45 degrees");
      stop();
      n = 0;
      break;

    case '3':
      rotR();
      delay(rotRT*voltageRatio*n/2);
      Serial2.println("ACK: Rotate Right with 90 degrees");
      stop();
      n = 0;
      break;

    case '4':
      rotR();
      delay(rotRT*voltageRatio*n/2);
      Serial2.println("ACK: Rotate Right with 135 degrees");
      stop();
      n = 0;
      break;

    case '5':
      rotL();
      delay(rotLT*voltageRatio*n/2);
      Serial2.println("ACK: Rotate Left with 180 degrees");
      stop();
      n = 0;
      break;

    case '6':
      rotL();
      delay(rotLT*voltageRatio*n/2);
      Serial2.println("ACK: Rotate Left with 45 degrees");
      stop();
      n = 0;
      break;

    case '7':
      rotL();
      delay(rotLT*voltageRatio*n/2);
      Serial2.println("ACK: Rotate Left with 90 degrees");
      stop();
      n = 0;
      break;

    case '8':
      rotL();
      delay(rotLT*voltageRatio*n/2);
      Serial2.println("ACK: Rotate Left with 135 degrees");
      stop();
      n = 0;
      break;

    case '9':
      stop();
      Serial2.println("ACK: Stop");
      n = 0;
      break;

    default:
      stop();
      Serial2.println("ACK: Unknown, Stopped");
      Serial.print("Unknown command: ");
      Serial.println(received);
      break;
    }
  }
  // Accelerometer mm
  mySensor.accelUpdate();
  mySensor.gyroUpdate();

  // Accelerometer – du använder bara X och Y
  float ax = mySensor.accelX();
  float ay = mySensor.accelY();

  // Korrigerade gyrovärden
  float gx = mySensor.gyroX() - gyroX_offset;
  float gy = mySensor.gyroY() - gyroY_offset;
  float gz = mySensor.gyroZ() - gyroZ_offset;

  Serial1.print("mpu: ");
  Serial1.print(ax); Serial1.print(", ");
  Serial1.print(ay); Serial1.print(", ");
  Serial1.print(gx); Serial1.print(", ");
  Serial1.println(gy); // Skriv ut på en ny rad

}

// === Movement functions ===

void Forward(){
forwardR();
forwardL();
}

void Backward(){
backwardR();
backwardL();
}

void rotR(){
backwardR1();
forwardL1();
}

void rotL(){
forwardR1();
backwardL1();
}

void stop(){
ledcWrite(pwmPinRF, 0); // Stop motor by writing 0 to the PWM channel
ledcWrite(pwmPinRB, 0);
ledcWrite(pwmPinLF, 0);
ledcWrite(pwmPinLB, 0);
}


void forwardR(){
ledcWrite(pwmPinRF, 74); // Motor R Forward speed prev 120
ledcWrite(pwmPinRB, 0); // Motor R Backward speed = 0
}

void backwardR(){
ledcWrite(pwmPinRB, 147); // Motor R Backward speed
ledcWrite(pwmPinRF, 0); // Motor R Forward speed = 0
}

void forwardL(){
ledcWrite(pwmPinLF,75); // Motor L Forward speed
ledcWrite(pwmPinLB, 0); // Motor L Backward speed = 0
}

void backwardL(){
ledcWrite(pwmPinLB, 146); // Motor L Backward speed
ledcWrite(pwmPinLF, 0); // Motor L Forward speed = 0
}

void forwardR1(){
ledcWrite(pwmPinRF, 90); // Motor R Forward speed prev 40
ledcWrite(pwmPinRB, 0); // Motor R Backward speed = 0
}

void backwardR1(){
ledcWrite(pwmPinRB, 85); // Motor R Backward speed prev40
ledcWrite(pwmPinRF, 0); // Motor R Forward speed = 0
}

void forwardL1(){
ledcWrite(pwmPinLF, 85); // Motor L Forward speed prev 50
ledcWrite(pwmPinLB, 0); // Motor L Backward speed = 0
}

void backwardL1(){
ledcWrite(pwmPinLB, 75); // Motor L Backward speed prev 50
ledcWrite(pwmPinLF, 0); // Motor L Forward speed = 0
}
//Gyro
void calibrateGyro() {
  Serial.println("Kalibrerar gyro... håll sensorn helt stilla!");
  float gx = 0.0, gy = 0.0, gz = 0.0;
  const int samples = 100;

  for (int i = 0; i < samples; i++) {
    mySensor.gyroUpdate();
    gx += mySensor.gyroX();
    gy += mySensor.gyroY();
    gz += mySensor.gyroZ();
    delay(10);
  }

  gyroX_offset = gx / samples;
  gyroY_offset = gy / samples;
  gyroZ_offset = gz / samples;

  Serial.println("Gyro-kalibrering klar!");
  Serial.print("Offset X: "); Serial.println(gyroX_offset);
  Serial.print("Offset Y: "); Serial.println(gyroY_offset);
  Serial.print("Offset Z: "); Serial.println(gyroZ_offset);
}

