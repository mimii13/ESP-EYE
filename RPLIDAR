import serial
import struct
import time
import threading
from threading import Lock
import matplotlib.pyplot as plt
import numpy as np

# Serial settings
PORT = "/dev/ttyUSB0"
BAUDRATE = 460800

# RPLIDAR protocol commands
CMD_STOP = b'\xA5\x25'
CMD_SCAN = b'\xA5\x20'

# Scan angles (every 15Â°)
check_angles = [i for i in range(0, 360, 15)]
current_array = [0] * len(check_angles)
old_array = [0] * len(check_angles)
count = 0
lock = Lock()

def parse_packet(packet):
    if len(packet) != 5:
        return None

    b0, b1, b2, b3, b4 = struct.unpack('<BBBBB', packet)

    # Start and inverted start check
    start_flag = b0 & 0x01
    inv_start_flag = (b0 >> 1) & 0x01
    if start_flag != (~inv_start_flag & 0x01):
        return None

    quality = b0 >> 2
    angle_q6 = ((b2 << 7) | (b1 >> 1))
    angle = angle_q6 / 64.0
    dist_q2 = (b4 << 8) | b3
    distance = dist_q2 / 4.0

    return angle, distance, quality

def get_descriptor(ser):
    descriptor = ser.read(7)
    if descriptor[:2] != b'\xA5\x5A':
        raise Exception("Failed to receive scan descriptor.")

def scan_loop():
    global count, current_array, old_array

    with serial.Serial(PORT, BAUDRATE, timeout=1) as ser:
        ser.write(CMD_STOP)
        time.sleep(0.1)
        ser.reset_input_buffer()

        ser.write(CMD_SCAN)
        get_descriptor(ser)
        print("[INFO] Scan started.")

        while True:
            packet = ser.read(5)
            if len(packet) != 5:
                ser.reset_input_buffer()
                continue

            result = parse_packet(packet)
            if result is None:
                continue

            angle, distance, quality = result
            angle_rounded = round(angle)

            if angle_rounded in check_angles and angle_rounded == check_angles[count]:
                with lock:
                    current_array[count] = round(distance)
                    count += 1
                    if count >= len(check_angles):
                        count = 0
                        old_array = current_array[:]

def get_lidar_data():
    with lock:
        return old_array[:]

def visualize_loop():
    plt.ion()
    fig = plt.figure(figsize=(6,6))
    ax = fig.add_subplot(111, polar=True)
    line, = ax.plot([], [], marker='o', color='cyan')
    ax.set_ylim(0, 6000)
    ax.set_theta_zero_location("N")
    ax.set_theta_direction(-1)
    ax.set_title("RPLIDAR C1 Live Scan", fontsize=16)

    while True:
        data = get_lidar_data()
        angles = np.radians(check_angles + [0])
        distances = data + [data[0]]

        line.set_data(angles, distances)
        fig.canvas.draw()
        fig.canvas.flush_events()
        time.sleep(0.1)

# --- MAIN ---
if __name__ == "__main__":
    try:
        reader_thread = threading.Thread(target=scan_loop, daemon=True)
        reader_thread.start()

        visualize_loop()

    except KeyboardInterrupt:
        print("\n[INFO] Shutting down.")
