package autonavigate;

import javax.microedition.io.Connector;
import javax.microedition.io.StreamConnection;
import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class BluetoothClient {

    // --- Flagga f√∂r replanering ---
    // === √ÑNDRING B√ñRJAR ===
    public volatile boolean replanRequested = false;
    // === √ÑNDRING SLUT ===

    public volatile boolean targetReached = false; //ED
    public volatile boolean ackReceived = false; //ED

    private static final String AGV_URL = "btspp://b827eb7bd6ad:1;authenticate=false;encrypt=false;master=false"; //

    private StreamConnection connection;
    private PrintWriter writer;
    private BufferedReader reader;
    private ControlUIny gui;
    private DataStore ds;
    private final List<int[]> lastLidarPoints = new ArrayList<>();
    private AutoNavigate an;
    private double lastValidX = -1;
    private double lastValidY = -1;
    private final List<double[]> lidarHistory = new LinkedList<>();
    private boolean initialRouteCalculated = false;

    public BluetoothClient(ControlUIny gui, DataStore ds, AutoNavigate an) {
        this.gui = gui;
        this.ds = ds;
        this.an = an;
    }

    public void connect() {
        try {
            gui.appendStatus("üîå Ansluter till AGV...\n");

            connection = (StreamConnection) Connector.open(AGV_URL);
            OutputStream out = connection.openOutputStream();
            InputStream in = connection.openInputStream();

            writer = new PrintWriter(out, true);
            reader = new BufferedReader(new InputStreamReader(in));

            gui.appendStatus("‚úÖ Ansluten! Anslutningen √§r √∂ppen.\n");

        } catch (Exception e) {
            gui.appendStatus("‚ùå Anslutningsfel: " + e.getMessage() + "\n");
            e.printStackTrace();
        }
    }

    public void sendPositionCommand() {
        if (!isConnected()) return;
        writer.println("position");
        writer.flush();
        gui.appendStatus("? Skickade 'position' till AGV.\n");
    }

    public void sendLidarCommand() {
        if (!isConnected()) return;
        writer.println("lidar");
        writer.flush();
        gui.appendStatus("? Skickade 'lidar' till AGV.\n");
    }

    public void sendLjusCommand() {
        if (!isConnected()) return;
        writer.println("R");
        writer.flush();
        gui.appendStatus("? Skickade 'ljus' till AGV.\n");
    }

    public void ping() {
        if (connection == null || writer == null) {
            gui.appendStatus("‚ùå Ingen anslutning. Kan inte pinga.\n");
            return;
        }
        try {
            writer.println("ping");
            writer.flush();
            gui.appendStatus("‚úÖ Anslutning OK. Ping skickad.\n");
        } catch (Exception e) {
            gui.appendStatus("‚ùå Anslutning f√∂rlorad: " + e.getMessage() + "\n");
        }
    }

    public void startUnifiedReceiver() {
        if (!isConnected()) return;
        gui.appendStatus("üöÄ Startar kombinerad mottagning av position och LIDAR...\n");

        new Thread(() -> {
            try {
                while (true) {
                    if (reader == null) {
                        gui.appendStatus("‚ùó BufferedReader √§r null ‚Äì anslutning inte klar?\n");
                        continue;
                    }

                    String line = reader.readLine();
                    if (line == null) {
                        gui.appendStatus("‚ùó Str√∂mmen verkar st√§ngd.\n");
                        break;
                    }

                    gui.appendStatus("üì® Mottaget: " + line + "\n");

                    if (line.startsWith("POS:")) {
                        new Thread(() -> {
                            handlePositionData(line);
                        }).start();
                    } else if (line.startsWith("LIDAR:")) {
                        handleLidarData(line);
                    } else if (line.trim().equals("Target_reached")) {
                        targetReached = true;
                        gui.appendStatus("‚úÖ AGV har n√•tt m√•let!\n");
                    } else if (line.trim().equalsIgnoreCase("klar")) {
                        ackReceived = true;
                        gui.appendStatus("‚úÖ AGV bekr√§ftade steg: klar\n");
                    } else {
                        System.out.println("‚ÑπÔ∏è Ok√§nt meddelande: " + line + "\n");
                        gui.appendStatus("‚ÑπÔ∏è Ok√§nt meddelande: " + line + "\n");
                    }

                }
            } catch (IOException e) {
                gui.appendStatus("‚ùå Fel vid l√§sning: " + e.getMessage() + "\n");
            }
        }, "BT-Receiver").start();
    }

    private void handleLidarData(String line) {
        String[] parts = line.substring(6).split(",");
        if (parts.length != 360) {
            gui.appendStatus("‚ö†Ô∏è Felaktig LIDAR-vektor: " + parts.length + " v√§rden\n");
            return;
        }

        for (int[] point : lastLidarPoints) {
            int row = point[0];
            int col = point[1];
            if (row >= 0 && row < ds.rows && col >= 0 && col < ds.columns) {
                if (ds.ObstacleMatrix[row][col] == 1) {
                    ds.ObstacleMatrix[row][col] = 0;
                }
            }
        }
        lastLidarPoints.clear();

        double[] currentVector = new double[360];
        for (int i = 0; i < 360; i++) {
            try {
                currentVector[i] = Double.parseDouble(parts[i].trim());
            } catch (NumberFormatException e) {
                currentVector[i] = 0;
            }
        }
        synchronized (lidarHistory) {
            lidarHistory.add(currentVector);
            if (lidarHistory.size() > 5) {
                lidarHistory.remove(0);
            }
        }

        double[] avgVector = new double[360];
        synchronized (lidarHistory) {
            for (int i = 0; i < 360; i++) {
                double sum = 0;
                int count = 0;
                for (double[] vec : lidarHistory) {
                    if (vec[i] > 0) {
                        sum += vec[i];
                        count++;
                    }
                }
                avgVector[i] = (count > 0) ? sum / count : 0;
            }
        }

        boolean blockerat = false;

        for (int i = 0; i < 360; i++) {
            try {
                int adjustedAngle = (i - (int) ds.agvDirection) % 360;
                double angleRad = Math.toRadians(adjustedAngle);
                double distance = avgVector[i];

                if (distance <= 50.0 || distance >= 200.0 || distance == 0) continue;

                double deltaX = distance * Math.cos(angleRad);
                double deltaY = distance * Math.sin(angleRad);
                double obsX = ds.robotX + deltaX;
                double obsY = ds.robotY - deltaY;
                int row = (int) (obsY / ds.gridsize);
                int col = (int) (obsX / ds.gridsize);

                if (row >= 0 && row < ds.rows && col >= 0 && col < ds.columns) {
                    int currentVal = ds.ObstacleMatrix[row][col];
                    if (currentVal == 6 || currentVal == 4 || currentVal == 5) continue;
                    if (currentVal == 3) blockerat = true;
                    ds.ObstacleMatrix[row][col] = 1;
                    lastLidarPoints.add(new int[]{row, col});
                }

            } catch (Exception e) {
                gui.appendStatus("‚ö†Ô∏è LIDAR-processfel vid index " + i + "\n");
            }
        }

        gui.repaint();

        // === √ÑNDRING B√ñRJAR ===
        if (blockerat) {
            stopRobot();
            replanRequested = true;
            gui.appendStatus("üõë Rutt blockerad ‚Äì roboten stannar.\n");
            gui.appendStatus("üîÑ R√§knar om ny rutt...\n");
            for (int i = 0; i < ds.rows; i++) {
                for (int j = 0; j < ds.columns; j++) {
                    if (ds.ObstacleMatrix[i][j] == 3) ds.ObstacleMatrix[i][j] = 0;
                }
            }
            new Thread(() -> {
                an.startMapplanning();
                gui.repaint();
                gui.appendStatus("‚úÖ Ny rutt ber√§knad ‚Äì roboten kan √•teruppta.\n");
            }).start();
            return;
        }
        // === √ÑNDRING SLUT ===
    }

    private void handlePositionData(String line) {
        String[] parts = line.substring(4).split(",");
        if (parts.length >= 2) {
            try {
                double x = Double.parseDouble(parts[0].trim());
                double y = Double.parseDouble(parts[1].trim());
                ds.robotX = x;
                ds.robotY = y;
                gui.appendStatus(String.format("üìç Uppdaterad position: X=%.1f cm, Y=%.1f cm\n", ds.robotX, ds.robotY));
                gui.repaint();
                if (!initialRouteCalculated && ds.robotX != 0 && ds.robotY != 0) {
                    initialRouteCalculated = true;
                    gui.appendStatus("üó∫Ô∏è Initierar ruttber√§kning...\n");
                    new Thread(() -> {
                        an.startMapplanning();
                        gui.repaint();
                        gui.appendStatus("‚úÖ Initial rutt ber√§knad.\n");
                    }).start();
                }

            } catch (NumberFormatException e) {
                gui.appendStatus("‚ö†Ô∏è Felaktig POS-data: " + line + "\n");
            }
        }
    }

    public void sendDirection(String dir) {
        if (!isConnected()) return;
        writer.println(dir);
        writer.flush();
    }

    public boolean waitForAck() {
        int timeoutMs = 10000;
        int waited = 0;
        int delayMs = 100;
        try {
            while (waited < timeoutMs) {
                if (reader.ready()) {
                    String ack = reader.readLine();
                    if ("klar".equalsIgnoreCase(ack.trim())) {
                        gui.appendStatus("‚úÖ AGV bekr√§ftade steg: klar\n");
                        return true;
                    } else {
                        gui.appendStatus("‚ÑπÔ∏è Mottaget annat √§n klar: " + ack + "\n");
                    }
                }
                Thread.sleep(delayMs);
                waited += delayMs;
            }
            gui.appendStatus("‚ùó Timeout: Ingen bekr√§ftelse fr√•n AGV efter " + (timeoutMs / 1000) + " sekunder.\n");
            stopRobot();
        } catch (IOException e) {
            gui.appendStatus("‚ùå Fel vid v√§ntan p√• klar: " + e.getMessage() + "\n");
        } catch (InterruptedException e) {
            gui.appendStatus("‚ö†Ô∏è V√§ntan avbruten: " + e.getMessage() + "\n");
        }
        return false;
    }

    private void stopRobot() {
        try {
            writer.println("STOP");
            writer.flush();
            gui.appendStatus("üö® N√∂dstopp skickat till AGV!\n");
        } catch (Exception e) {
            gui.appendStatus("‚ùå Fel vid s√§ndning av n√∂dstopp: " + e.getMessage() + "\n");
        }
    }

    public void emergencyStop() {
        if (!isConnected()) {
            gui.appendStatus("‚ùå Ingen anslutning. Kan inte skicka n√∂dstopp.\n");
            return;
        }
        try {
            writer.println("STOP");
            writer.flush();
            gui.appendStatus("üö® N√∂dstopp skickat till AGV!\n");
        } catch (Exception e) {
            gui.appendStatus("‚ùå Fel vid s√§ndning av n√∂dstopp: " + e.getMessage() + "\n");
        }
    }

    private boolean isConnected() {
        if (connection == null || writer == null || reader == null) {
            gui.appendStatus("‚ö†Ô∏è Inte ansluten till AGV. Tryck p√• Anslut f√∂rst.\n");
            return false;
        }
        return true;
    }

    public void disconnect() {
        try {
            if (connection != null) connection.close();
            gui.appendStatus("üîå Anslutningen st√§ngd.\n");
        } catch (IOException e) {
            gui.appendStatus("‚ö†Ô∏è Fel vid fr√•nkoppling: " + e.getMessage() + "\n");
        }
    }
}
